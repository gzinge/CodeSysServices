plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.9'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.cloud.tools.jib' version '3.3.2'
}

group = 'com.encora.codesys'
version = '0.0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'io.jsonwebtoken:jjwt:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	maxParallelForks = 1
	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
		exceptionFormat "full"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jib {
	from {
		image = 'eclipse-temurin:21-jre' // Or your preferred base image
	}
	to {
		image = "gzinge/codesys:${project.version}" // Replace with your Docker Hub details
		tags = ['latest']
		auth {
			username = project.findProperty('docker.username') ?: ''
			password = project.findProperty('docker.password') ?: ''
		}// You can add more tags if needed
	}
	container {
		// Configure container settings like ports, entrypoints, etc.
		ports = ['8080']
		// Example: If your app runs a web server on port 8080
	}
}
